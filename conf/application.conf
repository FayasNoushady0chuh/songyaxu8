#mongodb设置
mongodb {
  dbname = "cookim"
  uri = "mongodb://localhost:27017/local"
}

jwt {
  secret = "e56216c9-8271-4500-9b13-a3e6c855d7312635ca0a-d071-454d-b0e4-b1de4871a8700132fb96-0655-462a-b7c4-134579e8e06fdf9dbe65-cb5c-42a8-abaf-77ffcf17ec18"
}
#akka http configuration
akka.http {
  server {
    remote-address-header = on
    raw-request-uri-header = on
    idle-timeout = 120 s
  }
}

#akka设置
akka {
  loglevel = "WARNING"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers { #配置可能使用的序列化算法
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    kryo  { #Kryo序列化的配置
      type = "graph"
      idstrategy = "explicit" #必须使用explicit生成classID，否则对端的actor无法识别本classID
      serializer-pool-size = 16
      buffer-size = 4096
      use-manifests = false
      implicit-registration-logging = true
      kryo-trace = false
      classes = [
        "java.lang.String",
        "scala.Some",
        "scala.None$",
        "akka.util.ByteString$ByteString1C",
        "com.cookeem.chat.event.WsTextDown",
        "com.cookeem.chat.event.WsBinaryDown",
        "com.cookeem.chat.event.ClusterText",
        "com.cookeem.chat.event.ClusterBinary",
        "com.cookeem.chat.event.UserOnline",
        "com.cookeem.chat.event.UserOffline$"
      ]
    }
    serialization-bindings {
      "java.lang.String"=kryo
      "scala.Some"=kryo
      "scala.None$"=kryo
      "akka.util.ByteString$ByteString1C"=kryo
      "com.cookeem.chat.event.WsTextDown"=kryo
      "com.cookeem.chat.event.WsBinaryDown"=kryo
      "com.cookeem.chat.event.ClusterText"=kryo
      "com.cookeem.chat.event.ClusterBinary"=kryo
      "com.cookeem.chat.event.UserOnline"=kryo
      "com.cookeem.chat.event.UserOffline$"=kryo
    }
  }
  remote.netty.tcp.hostname = localhost
  cluster {
    seed-nodes = ["akka.tcp://chat-cluster@localhost:2551"]
    #auto-down-unreachable-after = 10s
    metrics.enabled = off
  }
}