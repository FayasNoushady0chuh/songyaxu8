akka {
  loglevel = "WARNING"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    kryo  { #Kryo序列化的配置
      type = "graph"
      idstrategy = "incremental"
      serializer-pool-size = 16
      buffer-size = 4096
      use-manifests = false
      implicit-registration-logging = true
      kryo-trace = false
      classes = [
        "java.lang.String",
        "scala.Some",
        "scala.None$",
        "cmgd.zenghj.hss.actor.DirectiveStopMember$",
        "cmgd.zenghj.hss.actor.DirectiveListDir$",
        "cmgd.zenghj.hss.actor.DirectiveListFile",
        "cmgd.zenghj.hss.actor.DirectiveStat$",
        "cmgd.zenghj.hss.actor.DirectiveStatResult",
        "cmgd.zenghj.hss.actor.DirectiveFtpKafka",
        "cmgd.zenghj.hss.actor.DirectiveFtpKafkaResult"
      ]
    }
    serializers { #配置可能使用的序列化算法
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings { #配置序列化类与算法的绑定
      "java.lang.String"=kryo
      "scala.Some"=kryo
      "scala.None$"=kryo
      "cmgd.zenghj.hss.actor.DirectiveStopMember$"=kryo
      "cmgd.zenghj.hss.actor.DirectiveListDir$"=kryo
      "cmgd.zenghj.hss.actor.DirectiveListFile"=kryo
      "cmgd.zenghj.hss.actor.DirectiveStat$"=kryo
      "cmgd.zenghj.hss.actor.DirectiveStatResult"=kryo
      "cmgd.zenghj.hss.actor.DirectiveFtpKafka"=kryo
      "cmgd.zenghj.hss.actor.DirectiveFtpKafkaResult"=kryo
    }
  }
  remote.netty.tcp.hostname = localhost
  cluster {
    seed-nodes = ["akka.tcp://chat-cluster@localhost:2551"]
    #auto-down-unreachable-after = 10s
    metrics.enabled = off
  }
}